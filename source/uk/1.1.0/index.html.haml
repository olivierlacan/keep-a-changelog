---
description: Ведіть Changelog
title: Ведіть Changelog
language: uk
version: 1.1.0
---
.header
  .title
    %h1 Ведіть Changelog
    %h2 Не дозволяйте друзям зливати лоґи ґіта у лоґ змін.

  = link_to data.links.changelog do
    Version
    %strong= current_page.metadata[:page][:version]

  %pre.changelog{ lang: "en" }= File.read("CHANGELOG.md")

.answers
  %h3#what
    %a.anchor{ href: "#what", aria_hidden: "true" }
    Що таке лоґ змін?

  %p
    Лоґ змін — це файл, що містить підтримуваний та хронололічно
    впорядкований список змін для кожної версії проєкту.

  %h3#why
    %a.anchor{ href: "#why", aria_hidden: "true" }
    Навіщо вести лоґ змін?

  %p
    Це дозволяє полегшити користувачам та контриб’юторам слідкувати за змінами
    у релізах (чи версіях) проєкту.

  %h3#who
    %a.anchor{ href: "#who", aria_hidden: "true" }
    Кому потрібен лоґ змін?

  %p
    Людям. Користувачам та розробникам, кінцевими користувачами програмного
    забезпечення є люди, яким важливо знати з чим вони працюють.
    Якщо відбулися зміни, то люди повинні знати що змінилося і як.

.good-practices
  %h3#how
    %a.anchor{ href: "#how", aria_hidden: "true" }
    Як створити хороший лоґ змін?

  %h4#principles
    %a.anchor{ href: "#principles", aria_hidden: "true" }
    Головні принципи

  %ul
    %li
      Лоґ змін <em>для людей</em>, а не машин.
    %li
      Окремий розділ для кожної версії.
    %li
      Зміни одного типу мають бути згруповані.
    %li
      На версії та секції потрібно ставити гіперпосилання.
    %li
      Остання версія мусить бути на початку.
    %li
      Кожна версія має мати власну дату.
    %li
      Вкажіть чи підтримуєте Ви принципи #{link_to "Семантичного версіювання", data.links.semver}.

  %a.anchor{ href: "#types", aria_hidden: "true" }
  %h4#types Типи змін

  %ul
    %li
      %code Додано
      для нового функціоналу.
    %li
      %code Змінено
      для змін в існуючому функціоналі.
    %li
      %code Застаріло
      для функціоналу, що планується видалити.
    %li
      %code Видалено
      про вже видалений функціонал.
    %li
      %code Виправлення
      для будь яких виправлень.
    %li
      %code Безпека
      при виявленні вразливостей.

.effort

  %h3#effort
    %a.anchor{ href: "#effort", aria_hidden: "true" }
    Як мені докладати мінімальні зусилля для ведення лоґу змін?

  %p
    Ведіть розділ <code>Нове</code> на початку файла.

  %p Для переслідування подвійної цілі:

  %ul
    %li
      Люди можуть бачити майбутні зміни в найближчому релізі
    %li
      Як настане час релізу, Ви можете перемістити розділ <code>Нове</code>
      у розділ нового релізу,

.bad-practices
  %h3#bad-practices
    %a.anchor{ href: "#bad-practices", aria_hidden: "true" }
    Чи може лоґ змін бути поганим?

  %p Так. Ось декілька способів зробити лоґ змін не вдалим.

  %h4#log-diffs
    %a.anchor{ href: "#log-diffs", aria_hidden: "true" }
    Лоґи змін між комітами.

  %p
    Використовувати лоґи комітів як лоґи змін – це погана ідея.
    Вони наповнені інформаційним шумом. Такими як коміти злиття,
    не інформативні назви комітів, змінами у документації тощо.

  %p
    Призначення комітів у тому, щоб документувати кроки в еволюції коду.
    У деяких проєктах історія комітів доглянута, в інших – ні.

  %p
    Призначення ж лоґу змін полягає у документації вагомих змін,
    часто між багатьма комітами, доносячи їх призначення до кінцевого
    користувача.

  %h4#ignoring-deprecations
    %a.anchor{ href: "#ignoring-deprecations", aria_hidden: "true" }
    Ігнорування застарілого функціоналу

  %p
    Коли люди оновлюються з версії до версії, їм потрібна повна впевненість
    у тому, чи може щось зламатися. Їм повинна бути надана можливість оновитися
    до версії зі списком застарілого функціоналу, видалити все застаріле,
    а потім оновитися до версії з видаленим застарілим функціоналом.

  %p
    Якщо Ви не займаєтеся лоґом змін, то хоча б ведіть список
    застарілого, видаленого або серйозних змін функціоналу.


  %h4#confusing-dates
    %a.anchor{ href: "#confusing-dates", aria_hidden: "true" }
    Незрозумілі дати

  %p
    Регіональні дати можуть відрізнятися і це може бути складно для
    правильного розуміння ваших дат для користувачів у різних куточках
    світу. Варто надавати переваги датам, що форматовані за таким зразком:
    <code>2017-07-17</code>. У них числа ідуть від найбільшого до
    найменшого: рік, місяць, день. Мінімізує конфузи у випадку використання
    регіональних форматів, коли день і місяць можуть мати різний порядок.
    Цей формат не пересікається з більшістю інших форматів і є
    #{link_to "стандартом ISO", data.links.isodate}. Тому такий формат рекомендується для
    лоґів змін.

  %h4#inconsistent-changes
    %a.anchor{ href: "#inconsistent-changes", aria_hidden: "true" }
    Непослідовні зміни

  %p
    Журнал змін, в якому згадуються лише деякі зміни, може бути настільки ж небезпечним
    як і відсутність журналу змін. Хоча багато змін можуть бути несуттєвими
    важливими – наприклад, видалення одного пробілу може не потребувати
    фіксувати у всіх випадках – будь-які важливі зміни повинні бути
    згадуватися у журналі змін. Непослідовне застосування змін,
    ваші користувачі можуть помилково подумати, що журнал змін є єдиним джерелом
    істини. Це не повинно бути так. З великою силою приходить велика відповідальність –
    мати хороший журнал змін означає мати постійно оновлюваний журнал змін.

  %aside
    Є також інші. Допоможіть зібрати антипатерни,
    = link_to "створіть тікет", data.links.issue
    або пул реквест

.frequently-asked-questions
  %h3#frequently-asked-questions
    %a.anchor{ href: "#frequently-asked-questions", aria_hidden: "true" }
    Поширені запитання

  %h4#standard
    %a.anchor{ href: "#standard", aria_hidden: "true" }
    Чи існує стандарт лоґів змін?

  %p
    Не зовсім. Є   #{link_to "стайлґайд лоґів змін GNU", data.links.gnustyle}
    або  #{link_to "довгий у два параграфа GNU NEWS file", data.links.gnunews}.
    Обидва неадекватні і неповні.

  %p
    Цей проєкт покликаний бути
    = link_to "поліпшеною угодою про лоґи змін.", data.links.changelog
    Це виходить із ліпших практик open source спільноти.

  %p
    Здорова критика, дискусія та пропозиції поліпшення
    = link_to "вітаються.", data.links.issue

  %h4#filename
    %a.anchor{ href: "#filename", aria_hidden: "true" }
    Як назвати файл лоґів змін?

  %p
    Назвіть <code>CHANGELOG.md</code>. У деяких проєктах файл носить назви
    <code>HISTORY</code>, <code>NEWS</code> або <code>RELEASES</code>.

  %p
    Може видатися, що назва файлу для лоґів змін не суттєва, проте
    навіщо ускладнювати життя користувачам змушуючи їх шукати?

  %h4#github-releases
    %a.anchor{ href: "#github-releases", aria_hidden: "true" }
    Як щодо GitHub релізів?

  %p
    Це чудова ініціатива. #{link_to "Релізи", data.links.github_releases} можуть бути використані для
    перетворення простих теґів у Git (<code>v1.0.0</code> – до прикладу)
    у деталізовані нотатки до релізів шляхом їх редагування вручну або
    за допомогою коментарів до цих теґів.

  %p
    Релізи GitHub є не портативним лоґом змін, який може бути показаний
    користувачам лише на самому сайті GitHub. Його можна вести подібно
    до формату Keep a Changelog, але для цього потрібні значні зусилля.

  %p
    Поточна версія на GitHub не так добре очевидна для користувача,
    на відмінну від звичайних файлів з іменами у верхньому регістрі
    (<code>README</code>, <code>CONTRIBUTING</code> і так далі).
    Крім того, інтерфейс не дозволяє посилання на лоґи комітів між
    релізами.

  %h4#automatic
    %a.anchor{ href: "#automatic", aria_hidden: "true" }
    Чи можуть лоґи змін автоматично парситися?

  %p
    Це заскладно, оскільки люди використовують різні формати та
    імена файлів.

  %p
    #{link_to "Vandamme", data.links.vandamme} – це ґем для Ruby, створений
    командою Gemnasium, який парсить багато (але не всі) лоґів
    змін проєктів з відкритим кодом.

  %h4#yanked
    %a.anchor{ href: "#yanked", aria_hidden: "true" }
    А як щодо yanked-релізів?

  %p
    Yanked-релізи – це версії, що вилучаються із-за серйозних баґів або проблем
    з безпекою у них. Часто вони навіть не згадуються у лоґах змін.
    А повинні. І описуватися вони повинні так:

  %p <code>## [0.0.5] – 2014-12-13 [YANKED]</code>

  %p
    <code>[YANKED]</code> навмисне кидається в очі. Важливо, щоб його
    помітили. Обмежений квадратними дужками, щоб його легше було
    спарсити.


  %h4#rewrite
    %a.anchor{ href: "#rewrite", aria_hidden: "true" }
    Чи є сенс переписати лоґ змін?

  %p
    Звісно. Завжди є сенс поліпшувати лоґ змін. І відкривати пул-реквести
    додаючи втрачені релізи у проєкти з відкритим кодом і закинутими
    лоґами змін.

  %p
    Також можлива ситуація, що Ви забули вказати критичні зміни для версії.
    Очевидно, що потрібно такий лоґ оновити.



  %h4#contribute
    %a.anchor{ href: "#contribute", aria_hidden: "true" }
    Як я можу допомогти вашому проєкту?

  %p
    Цей документ не претендує на виключну <strong>правду</strong>;
    Це моє бачення, зі зібраною інформацію та прикладами.

  %p
    Хотів би, щоб спільнота дійшла згоди. Я вірю у дискусію та результат.

  %p
    Тому <strong>#{link_to "беріть участь", data.links.repo}</strong>.

.press
  %h3 Обговорення
  %p
    Я приходив на #{link_to "подкаст The Changelog", data.links.thechangelog}, щоб обговорити
    те, чому ментейнери та контриб’ютори повинні вести лоґи змін, а також
    про мою мотивацію для створення цього проєкту.
