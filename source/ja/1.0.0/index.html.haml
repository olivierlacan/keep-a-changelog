---
description: Keep a Changelog
title: Keep a Changelog
language: en
version: 1.0.0
---

- changelog = "https://github.com/olivierlacan/keep-a-changelog/blob/master/CHANGELOG.md"
- gh = "https://github.com/olivierlacan/keep-a-changelog"
- issues = "https://github.com/olivierlacan/keep-a-changelog/issues"
- semver = "https://semver.org/"
- shields = "https://shields.io/"
- thechangelog = "https://changelog.com/podcast/127"
- vandamme = "https://github.com/tech-angels/vandamme/"
- iso = "http://www.iso.org/iso/home/standards/iso8601.htm"
- ghr = "https://help.github.com/articles/creating-releases/"
- gnustyle = "https://www.gnu.org/prep/standards/html_node/Style-of-Change-Logs.html#Style-of-Change-Logs"
- gnunews = "https://www.gnu.org/prep/standards/html_node/NEWS-File.html#NEWS-File"

.header
  .title
    %h1 変更履歴を記録する
    %h2 友達にGitログを変更履歴に移させないでください。

  = link_to changelog do
    Version
    %strong= current_page.metadata[:page][:version]

  %pre.changelog= File.read("CHANGELOG.md")

.answers
  %h3#what
    %a.anchor{ href: "#what", aria_hidden: "true" }
    変更履歴とは何ですか？

  %p
    変更履歴とは、プロジェクトの各バージョンに対する注目に値する変更点の時系列順に並べられたリストを含むファイルです。

  %h3#why
    %a.anchor{ href: "#why", aria_hidden: "true" }
    なぜ変更履歴を記録するのですか？

  %p
    プロジェクトの各リリース（またはバージョン）の間で、どのような注目すべき変更が行われたのかをユーザーおよびコントリビューターが正確に把握しやすくするためです。

  %h3#who
    %a.anchor{ href: "#who", aria_hidden: "true" }
    誰が変更履歴を必要としますか？

  %p
    人々です。消費者であろうと開発者であろうと、ソフトウェアのエンドユーザーはソフトウェアの内容を気にする人間です。ソフトウェアに変更があるとき、人々は変更の理由や方法を知りたいのです。

.good-practices
  %h3#how
    %a.anchor{ href: "#how", aria_hidden: "true" }
    良い変更履歴を作るには？

  %h4#principles
    %a.anchor{ href: "#principles", aria_hidden: "true" }
    基本理念

  %ul
    %li
      変更履歴は機械のためではなく<em>人間のため</em>にあります。
    %li
      バージョンごとに作成する必要があります。
    %li
      同じ種類の変更をグループ化する必要があります。
    %li
      バージョンとセクションはリンク可能である必要があります。
    %li
      最新バージョンは先頭にきます。
    %li
      各バージョンのリリース日を表示されます。
    %li
      #{link_to "Semantic Versioning", semver} に従っているかどうか言及してください。

  %a.anchor{ href: "#types", aria_hidden: "true" }
  %h4#types 変更の種類

  %ul
    %li
      %code Added
      新機能について。
    %li
      %code Changed
      既存機能の変更について。
    %li
      %code Deprecated
      間もなく削除される機能について。
    %li
      %code Removed
      今回で削除された機能について。
    %li
      %code Fixed
      バグ修正について。
    %li
      %code Security
      脆弱性に関する場合。

.effort

  %h3#effort
    %a.anchor{ href: "#effort", aria_hidden: "true" }
    変更履歴のメンテナンスに必要な労力を減らすにはどうすればよいですか？

  %p
    今後の変更を追跡するには <code>Unreleased</code> セクションを上部に配置します。

  %p これには2つの目的があります。

  %ul
    %li
      人々は、今後のリリースでどのような変更が予想されるのかを確認することができます。
    %li
      リリース時には、 <code>Unreleased</code> セクションにある変更を
      新しいリリースバージョンのセクションに移動することができます。

.bad-practices
  %h3#bad-practices
    %a.anchor{ href: "#bad-practices", aria_hidden: "true" }
    Can changelogs be bad?

  %p Yes. Here are a few ways they can be less than useful.

  %h4#log-diffs
    %a.anchor{ href: "#log-diffs", aria_hidden: "true" }
    Commit log diffs

  %p
    Using commit log diffs as changelogs is a bad idea: they're full of
    noise. Things like merge commits, commits with obscure titles,
    documentation changes, etc.

  %p
    The purpose of a commit is to document a step in the evolution of
    the source code. Some projects clean up commits, some don't.

  %p
    The purpose of a changelog entry is to document the noteworthy
    difference, often across multiple commits, to communicate them
    clearly to end users.

  %h4#ignoring-deprecations
    %a.anchor{ href: "#ignoring-deprecations", aria_hidden: "true" }
    Ignoring Deprecations

  %p
    When people upgrade from one version to another, it should be
    painfully clear when something will break. It should be possible to
    upgrade to a version that lists deprecations, remove what's
    deprecated, then upgrade to the version where the deprecations
    become removals.

  %p
    If you do nothing else, list deprecations, removals, and any
    breaking changes in your changelog.


  %h4#confusing-dates
    %a.anchor{ href: "#confusing-dates", aria_hidden: "true" }
    Confusing Dates

  %p
    Regional date formats vary throughout the world and it's often
    difficult to find a human-friendly date format that feels intuitive
    to everyone. The advantage of dates formatted like
    <code>2017-07-17</code> is that they follow the order of largest to
    smallest units: year, month, and day. This format also doesn't
    overlap in ambiguous ways with other date formats, unlike some
    regional formats that switch the position of month and day numbers.
    These reasons, and the fact this date format is an
    #{link_to "ISO standard", iso}, are why it is the recommended date
    format for changelog entries.

  %aside
    There’s more. Help me collect these antipatterns by
    = link_to "opening an issue", issues
    or a pull request.

.frequently-asked-questions
  %h3#frequently-asked-questions
    %a.anchor{ href: "#frequently-asked-questions", aria_hidden: "true" }
    Frequently Asked Questions

  %h4#standard
    %a.anchor{ href: "#standard", aria_hidden: "true" }
    Is there a standard changelog format?

  %p
    Not really. There's the #{link_to "GNU changelog style guide", gnustyle},
    or the #{link_to "two-paragraph-long GNU NEWS file", gnunews}
    "guideline". Both are inadequate or insufficient.

  %p
    This project aims to be
    = link_to "a better changelog convention.", changelog
    It comes from observing good practices in the open source
    community and gathering them.

  %p
    Healthy criticism, discussion and suggestions for improvements
    = link_to "are welcome.", issues


  %h4#filename
    %a.anchor{ href: "#filename", aria_hidden: "true" }
    What should the changelog file be named?

  %p
    Call it <code>CHANGELOG.md</code>. Some projects use
    <code>HISTORY</code>, <code>NEWS</code> or <code>RELEASES</code>.

  %p
    While it's easy to think that the name of your changelog file
    doesn't matter that much, why make it harder for your end users to
    consistently find notable changes?

  %h4#github-releases
    %a.anchor{ href: "#github-releases", aria_hidden: "true" }
    What about GitHub Releases?

  %p
    It's a great initiative. #{link_to "Releases", ghr} can be used to
    turn simple git tags (for example a tag named <code>v1.0.0</code>)
    into rich release notes by manually adding release notes or it can
    pull annotated git tag messages and turn them into notes.

  %p
    GitHub Releases create a non-portable changelog that can only be
    displayed to users within the context of GitHub. It's possible to
    make them look very much like the Keep a Changelog format, but it
    tends to be a bit more involved.

  %p
    The current version of GitHub releases is also arguably not very
    discoverable by end-users, unlike the typical uppercase files
    (<code>README</code>, <code>CONTRIBUTING</code>, etc.). Another
    minor issue is that the interface doesn't currently offer links to
    commit logs between each release.

  %h4#automatic
    %a.anchor{ href: "#automatic", aria_hidden: "true" }
    Can changelogs be automatically parsed?

  %p
    It’s difficult, because people follow wildly different formats and
    file names.

  %p
    #{link_to "Vandamme", vandamme} is a Ruby gem created by the
    Gemnasium team and which parses many (but
    not all) open source project changelogs.


  %h4#yanked
    %a.anchor{ href: "#yanked", aria_hidden: "true" }
    What about yanked releases?

  %p
    Yanked releases are versions that had to be pulled because of a
    serious bug or security issue. Often these versions don't even
    appear in change logs. They should. This is how you should display
    them:

  %p <code>## 0.0.5 - 2014-12-13 [YANKED]</code>

  %p
    The <code>[YANKED]</code> tag is loud for a reason. It's important
    for people to notice it. Since it's surrounded by brackets it's also
    easier to parse programmatically.


  %h4#rewrite
    %a.anchor{ href: "#rewrite", aria_hidden: "true" }
    Should you ever rewrite a changelog?

  %p
    Sure. There are always good reasons to improve a changelog. I
    regularly open pull requests to add missing releases to open source
    projects with unmaintained changelogs.

  %p
    It's also possible you may discover that you forgot to address a
    breaking change in the notes for a version. It's obviously important
    for you to update your changelog in this case.


  %h4#contribute
    %a.anchor{ href: "#contribute", aria_hidden: "true" }
    How can I contribute?

  %p
    This document is not the <strong>truth</strong>; it’s my carefully
    considered opinion, along with information and examples I gathered.

  %p
    This is because I want our community to reach a consensus. I believe
    the discussion is as important as the end result.

  %p
    So please <strong>#{link_to "pitch in", gh}</strong>.

.press
  %h3 Conversations
  %p
    I went on #{link_to "The Changelog podcast", thechangelog}
    to talk about why maintainers and contributors should care about changelogs,
    and also about the motivations behind this project.
