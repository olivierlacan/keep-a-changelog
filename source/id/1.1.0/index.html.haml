---
title: Pencatatan Changelog
description: Standarisasi pencatatan Changelog untuk kolaborasi yang lebih baik
language: id
version: 1.1.0
---
.header
  .title
    %h1= current_page.data.title
    %h2= current_page.data.description

  = link_to data.links.changelog do
    Version
    %strong= current_page.metadata[:page][:version]

  %pre.changelog{ lang: "en" }= File.read("CHANGELOG.md")

.answers
  %h3#what
    %a.anchor{ href: "#what", aria_hidden: "true" }
    Apa itu changelog?

  %p
    Changelog adalah sebuah file berisi perubahan penting setiap versi sebuah proyek yang kronologis dan terkurasi. 

  %h3#why
    %a.anchor{ href: "#why", aria_hidden: "true" }
    Kenapa mencatat changelog?

  %p
    Agar perubahan penting antar versi sebuah proyek lebih mudah diamati bagi pengguna maupun kontributor.

  %h3#who
    %a.anchor{ href: "#who", aria_hidden: "true" }
    Siapa yang membutuhkan changelog?

  %p
    Kita semua. Baik itu pengguna atau pengembang, konsumen perangkat lunak adalah manusia yang peduli akan isi perangkat lunak tersebut. Kita semua ingin mengetahui bagaimana perangkat lunak tersebut berubah dan alasan dibalik perubahan tersebut. 

.good-practices
  %h3#how
    %a.anchor{ href: "#how", aria_hidden: "true" }
    Bagaimana cara mencatat changelog yang baik?

  %h4#principles
    %a.anchor{ href: "#principles", aria_hidden: "true" }
    Panduan Dasar

  %ul
    %li
      Changelog dicatat <em>untuk manusia</em>, bukan mesin.
    %li
      Ada catatan untuk setiap versi.
    %li
      Perubahan dengan jenis yang sama dikelompokkan.
    %li
      Tercantum rujukan untuk versi dan seksi.
    %li
      Versi terbaru tercatat di bagian teratas.
    %li
      Tanggal rilis setiap versi tercatat.
    %li
      Sebutkan apakah anda mengikuti #{link_to "Semantic Versioning", data.links.semver}.

  %a.anchor{ href: "#types", aria_hidden: "true" }
  %h4#types Types of changes

  %ul
    %li
      %code Added/Ditambahkan
      untuk fitur baru.
    %li
      %code Changed/Diubah
      untuk perubahan pada fitur yang sudah ada.
    %li
      %code Deprecated/Akan Dihilangkan
      untuk fitur yang akan dihilangkan dalam waktu dekat.
    %li
      %code Removed/Dihilangkan
      untuk fitur yang telah dihilangkan.
    %li
      %code Fixed/Diperbaiki
      untuk perbaikan bugs.
    %li
      %code Security/Keamanan
      jika ada kerentanan.

.effort

  %h3#effort
    %a.anchor{ href: "#effort", aria_hidden: "true" }
    Bagaimana cara mempermudah pemeliharaan changelog?

  %p
    Sediakan bagian <code>Unreleased/Belum Dirilis</code> di atas file changelog untuk mencatat perubahan yang akan datang.

  %p Manfaat bagian ini:

  %ul
    %li
      Kita dapat melihat perubahan yang akan datang.
    %li
      Bagian <code>Unreleased/Belum Dirilis</code> dapat dipindahkan ke catatan versi terbaru saat sudah rilis.
.bad-practices
  %h3#bad-practices
    %a.anchor{ href: "#bad-practices", aria_hidden: "true" }
    Apakah changelog bisa menjadi tidak bermanfaat?

  %p Bisa. Berikut sedikit contoh bagaimana keberadaan changelog menjadi tidak membantu:

  %h4#log-diffs
    %a.anchor{ href: "#log-diffs", aria_hidden: "true" }
    Menggunakan pesan commit log diff seadanya

  %p
    Pesan commit log diff (perbedaan sebuah file antar versi) merupakan catatan yang buruk untuk dijadikan changelog karena seringkali mereka tidak bermakna. Contohnya seperti merge commit, commit berjudul samar, perubahan dokumentasi, dan lainnya.

  %p
    Tujuan pesan commit adalah mendokumentasikan sebuah tindakan dalam source code. Pesan ini bisa jadi tidak dirapikan.
  %p
    Tujuan sebuah catatan dalam changelog adalah mendokumentasikan perubahan-perubahan yang patut diperhatikan, dimana catatan ini seringkali merangkum perubahan serangkaian commit agar mudah dimengerti. 

  %h4#ignoring-deprecations
    %a.anchor{ href: "#ignoring-deprecations", aria_hidden: "true" }
    Mengabaikan Deprecations (fitur yang akan dihilangkan)

  %p
    Jika ada perubahan yang tidak kompatibel dari satu versi ke versi lainnya, perubahan ini seharusnya teramat jelas bagi orang-orang. Saat kita menggunakan sebuah versi perangkat lunak yang di dalamnya terdapat fitur yang akan dihilangkan (Deprecated), seharusnya kita dapat menghilangkan fitur tersebut lalu melakukan upgrade ke versi dimana fitur tersebut sudah dihilangkan (Removed). 

  %p
    If you do nothing else, list deprecations, removals, and any
    breaking changes in your changelog.


  %h4#confusing-dates
    %a.anchor{ href: "#confusing-dates", aria_hidden: "true" }
    Perbedaan Format Tanggal

  %p
    Mencari pola tanggal yang intuitif dan mudah dipahami oleh semua orang adalah masalah yang sulit. Hal ini karena pola tanggal di satu belahan bumi akan berbeda dengan belahan bumi lainnya. Tanggal yang disusun dalam pola <code>2017-07-17</code> memiliki keuntungan dimana pola tersebut dimulai dari unit terbesar: tahun, bulan, lalu hari. Format ini juga tidak tumpang tindih dengan format tanggal lainnya. Berbeda dengan format tanggal regional yang terkadang menukar posisi angka bulan dan tanggal.
    Format tanggal ini direkomendasikan dalam catatan changelog bukan hanya karena alasan yang telah disebut, tetapi juga karena pola ini mengikuti #{link_to "ISO standard", data.links.isodate} untuk penulisan tanggal.  

  %h4#inconsistent-changes
    %a.anchor{ href: "#inconsistent-changes", aria_hidden: "true" }
    Pencatatan yang tidak konsisten

  %p
    Mencatat sebuah changelog yang tidak lengkap dengan tidak mencatatnya sama sekali adalah sama-sama berbahaya. Walau perubahan kecil - menghapus sebuah spasi misalnya - mungkin tidak perlu dicatat, semua perubahan penting yang patut diperhatikan harus disebut dan tercatat di changelog. Jika dilakukan setengah-setengah konsumen perangkat lunak anda akan berpikir mereka sedang membaca changelog yang benar, padahal kenyataannya adalah sebaliknya. Changelog seharusnya selalu benar. Changelog yang baik adalah changelog yang selalu diperbarui. Jika anda ingin memiliki changelog yang baik, inilah tanggung jawab anda.

  %aside
    Masih banyak contoh lainnya. Bantu saya mengumpulkannya dengan 
    = link_to "membuka sebuah issue", data.links.issue
    atau pull request.

.frequently-asked-questions
  %h3#frequently-asked-questions
    %a.anchor{ href: "#frequently-asked-questions", aria_hidden: "true" }
    Frequently Asked Questions

  %h4#standard
    %a.anchor{ href: "#standard", aria_hidden: "true" }
    Is there a standard changelog format?

  %p
    Not really. There's the #{link_to "GNU changelog style guide", data.links.gnustyle},
    or the #{link_to "two-paragraph-long GNU NEWS file", data.links.gnunews}
    "guideline". Both are inadequate or insufficient.

  %p
    This project aims to be
    = link_to "a better changelog convention.", data.links.changelog
    It comes from observing good practices in the open source
    community and gathering them.

  %p
    Healthy criticism, discussion and suggestions for improvements
    = link_to "are welcome.", data.links.issue


  %h4#filename
    %a.anchor{ href: "#filename", aria_hidden: "true" }
    What should the changelog file be named?

  %p
    Call it <code>CHANGELOG.md</code>. Some projects use
    <code>HISTORY</code>, <code>NEWS</code> or <code>RELEASES</code>.

  %p
    While it's easy to think that the name of your changelog file
    doesn't matter that much, why make it harder for your end users to
    consistently find notable changes?

  %h4#github-releases
    %a.anchor{ href: "#github-releases", aria_hidden: "true" }
    What about GitHub Releases?

  %p
    It's a great initiative. #{link_to "Releases", data.links.github_releases} can be used to
    turn simple git tags (for example a tag named <code>v1.0.0</code>)
    into rich release notes by manually adding release notes or it can
    pull annotated git tag messages and turn them into notes.

  %p
    GitHub Releases create a non-portable changelog that can only be
    displayed to users within the context of GitHub. It's possible to
    make them look very much like the Keep a Changelog format, but it
    tends to be a bit more involved.

  %p
    The current version of GitHub releases is also arguably not very
    discoverable by end-users, unlike the typical uppercase files
    (<code>README</code>, <code>CONTRIBUTING</code>, etc.). Another
    minor issue is that the interface doesn't currently offer links to
    commit logs between each release.

  %h4#automatic
    %a.anchor{ href: "#automatic", aria_hidden: "true" }
    Can changelogs be automatically parsed?

  %p
    Itâ€™s difficult, because people follow wildly different formats and
    file names.

  %p
    #{link_to "Vandamme", data.links.vandamme} is a Ruby gem created by the
    Gemnasium team and which parses many (but
    not all) open source project changelogs.


  %h4#yanked
    %a.anchor{ href: "#yanked", aria_hidden: "true" }
    What about yanked releases?

  %p
    Yanked releases are versions that had to be pulled because of a
    serious bug or security issue. Often these versions don't even
    appear in change logs. They should. This is how you should display
    them:

  %p <code>## [0.0.5] - 2014-12-13 [YANKED]</code>

  %p
    The <code>[YANKED]</code> tag is loud for a reason. It's important
    for people to notice it. Since it's surrounded by brackets it's also
    easier to parse programmatically.


  %h4#rewrite
    %a.anchor{ href: "#rewrite", aria_hidden: "true" }
    Should you ever rewrite a changelog?

  %p
    Sure. There are always good reasons to improve a changelog. I
    regularly open pull requests to add missing releases to open source
    projects with unmaintained changelogs.

  %p
    It's also possible you may discover that you forgot to address a
    breaking change in the notes for a version. It's obviously important
    for you to update your changelog in this case.


  %h4#contribute
    %a.anchor{ href: "#contribute", aria_hidden: "true" }
    How can I contribute?

  %p
    This document is not the <strong>truth</strong>; itâ€™s my carefully
    considered opinion, along with information and examples I gathered.

  %p
    This is because I want our community to reach a consensus. I believe
    the discussion is as important as the end result.

  %p
    So please <strong>#{link_to "pitch in", data.links.repo}</strong>.

.press
  %h3 Conversations
  %p
    I went on #{link_to "The Changelog podcast", data.links.thechangelog}
    to talk about why maintainers and contributors should care about changelogs,
    and also about the motivations behind this project.
