---
description: 如何維護更新日誌
title: 如何維護更新日誌
language: zh-TW
version: 0.3.0
---

:markdown
  # 如何維護更新日誌

  ## 更新日誌絕對不應該是 git 日誌的堆砌物

  Version **#{current_page.metadata[:page][:version]}**

  ### 更新日誌是什麽？
  更新日誌（Change Log）是一個由人工編輯，以時間為倒序的列表。
  這個列表紀錄所有版本的重大變動。

%pre.changelog= File.read("CHANGELOG.md")

:markdown
  ### 為何要提供更新日誌？
  為了讓用戶和開發人員更好知道每一個版本有哪些區別。

  ### 為何我要在乎呢？
  歸根究柢，軟體是為人提供的。既然你不關心人，那麽為何寫軟體呢？
  一定是你內心深處的核心價值。

  我和 Adam Stancoviak 與 Jerod Santo 的[部落格][thechangelog]向大家介紹過為何程式碼的管理者和開發者應該在乎更新日誌。
  如果你有一小時的時間不妨聽聽。

  ### 如何整理出好的更新日誌
  好問題！

  一個好的更新日誌會滿足下列項目：

  - 給人而不是機器寫的。記住，要說人話。
  - 快速跳轉到任意段。所以採用 markdown 格式
  - 一個版本對應一個章節。
  - 最新的版本在上面，最舊的在下面。
  - 所有日期採用 'YYYY-MM-DD' 這種規範。（例如 2012 年 6 月 2 日可以用 2012-06-02 來表示）這個是國際通用，任何語言
  都能理解的，並且還被 [xkcd](http://xkcd.com/1179/) 推薦呢！
  - 標出來是否遵守[語義化版本][semver]
  - 每個版本應該包含下列項目：
    - 標明日期（要用上面說過的規範）
    - 標明分類（採用英文）。規範如下：
      - 'Added' 表示新功能
      - 'Changed' 表示功能變更
      - 'Deprecated' 表示不建議使用，未來會刪掉
      - 'Removed' 表示之前不建議使用的功能，這次真的刪掉了
      - 'Fixed' 表示修正的 bug
      - 'Security' 表示修正了安全相關的 bug

  ### 怎麽盡可能減少耗費的精力？
  永遠在文件最上方提供一個 'Unreleased' 未發布區域，來紀錄目前的變化。

  這樣做有兩大意義。

  - 大家可以看到接下來會有什麽變化
  - 在發布時，只要把 'Unreleased' 改為目前版本號，然後再新增一個新的 'Unreleased' 就行了

  ### 吐槽時間到了
  請你一定要注意：

  - **把 git 日誌扔到更新日誌裏。**千萬別這樣做，這沒辦法幫到任何人。
  - **不寫 'deprecations' 就刪功能。**沒必要這樣害人吧。
  - **採用各種不可靠的日期格式** 2012 年 12 月 12 日，這只有懂中文的人能看得懂而已。

  如果你還有要吐槽的，歡迎留 [issue][issues] 或者直接 PR

  ### 世界上不是有標準的更新日誌格式嗎？
  像是 GNU 或者 GNU NEWS 還是提過些規範的，事實是它們太過簡陋了。
  開發有那麽多種情況，採用那樣的規範，確實是不太合適的。

  這個項目提供的[規範][CHANGELOG]是我希望能夠成為世界規範的。
  我不認為目前的標準足夠好，而且作為一個社群，我們是有能力提供更棒的規範。
  如果你對這個規範有不滿的地方，不要忘記還可以[吐槽][issues]呢。

  ### 更新日誌文件名應該叫什麽？

  我們的案例中給的名字就是最好的規範：`CHANGELOG.md`，注意大小寫。

  像 `HISTORY.txt`, `HISTORY.md`, `History.md`, `NEWS.txt`,
  `NEWS.md`, `News.txt`, `RELEASES.txt`, `RELEASE.md`, `releases.md` 這麽
  多文件名就太不統一了。

  只會讓大家更難找到。

  ### 為何不直接記錄 `git log`?

  因為 git 日誌一定是亂糟糟的。哪怕一個最理想的由完美的程式設計師開發的提交的，哪怕一個
  從不忘記每次提交全部文件，不寫錯別字，不忘記重構每一個部分——也無法保證 git 日誌完美無瑕。
  況且 git 日誌的重點在於紀錄代碼的演化，而更新日誌則是紀錄最重要的變更。

  就像註解之於程式碼，更新日誌之於 git 日誌。前者解釋*為什麽*，而後者說明*發生了什麽*。

  ### 更新日誌能機器識別嗎？
  非常困難，因為有各種不同的文件格式和其他規範。

  [Vandamme][vandamme] 是一支 Ruby 程式（由 [Gemnasium][gemnasium] 團隊開發），可以解析
  很多種（但絕對不是全部）開源程式庫的更新日誌。

  ### 到底是 CHANGELOG 還是更新日誌

  CHANGELOG 是文件名，更新日誌是常用說法。CHANGELOG 採用大寫是有歷史根源的。就像很多類似的文件
  [`README`][README]，[`LICENSE`][LICENSE]，還有 [`CONTRIBUTING`][CONTRIBUTING]。

  採用大寫可以更加顯著，畢竟這是項目很重要的 metadata。就像[開源徽章][shields]。

  ### 那些後來撤下的版本怎麽辦？
  因為各種安全/重大 bug 原因被撤下的版本被標記 'YANKED'。這些版本一般不出現在更新日誌裏，但我建議他們出現。
  顯示方式應該是：

  `## 0.0.5 - 2014-12-13 [YANKED]`

  `[YANKED]` 採用大寫更加顯著，因為這個訊息很重要。而採用方括號則容易被程式解析。

  ### 是否可以重寫更新日誌
  當然。哪怕已經上線了，也可以重新更新更新日誌。有許多開源項目更新日誌不夠新，所以作者就會幫忙更新。

  另外，你也有可能發現自己忘記紀錄一個重大更新，這個時候不用說，快去更新你的更新日誌吧！

  ### 如何貢獻？
  本文件並不是 **真理**。這只是我的個人建議，並且包括許多收集的例子。
  哪怕[本開源庫][gh]提供一個[更新日誌案例][CHANGELOG]，我刻意沒有提供一個
  過於苛刻的規則列表（不像[語義化版本][semver]）。

  這是因為我希望通過社群達到統一觀點，我認為中間討論的過程與結果一樣重要。

  所以[**歡迎貢獻**][gh]。

  [CHANGELOG]: https://github.com/olivierlacan/keep-a-changelog/blob/master/CHANGELOG.md
  [CONTRIBUTING]: https://github.com/olivierlacan/keep-a-changelog/blob/master/CONTRIBUTING.md
  [LICENSE]: https://github.com/olivierlacan/keep-a-changelog/blob/master/LICENSE
  [README]: https://github.com/olivierlacan/keep-a-changelog/blob/master/README.md
  [gemnasium]: https://gemnasium.com/
  [gh]: https://github.com/olivierlacan/keep-a-changelog
  [issues]: https://github.com/olivierlacan/keep-a-changelog/issues
  [semver]: http://semver.org/lang/zh-TW/
  [shields]: http://shields.io/
  [thechangelog]: http://5by5.tv/changelog/127
  [vandamme]: https://github.com/tech-angels/vandamme
