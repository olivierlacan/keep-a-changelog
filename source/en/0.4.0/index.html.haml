---
description: Keep a Changelog
title: Keep a Changelog
language: en
version: 0.4.0
---

:markdown
  # Keep a Changelog

  ## Don’t let your friends dump git logs into changelogs™

  Version **#{current_page.metadata[:page][:version]}**

  ### What’s a changelog?

  A changelog is a file which contains a curated, chronologically ordered
  list of notable changes for each version of a project.

  ### Why keep a changelog?

  To make it easier for users and contributors to see precisely what notable
  changes have been made between each release (or version) of the project.

  ### Who needs a changelog?

  People do. Whether consumers or developers, the end users of software are
  human beings who care about what's in the sofware. When the software changes,
  people want to know why and how.

  ### How do I make a changelog?

  Let's look at our own changelog as an example:

  <pre class="changelog">#{File.read("CHANGELOG.md")}</pre>

  #### Guiding Principles

  - Changelogs are *for humans*, not machines.
  - There should be an entry for every single version.
  - The same [types of changes](#types-of-changes) should be grouped.
  - Versions and sections should be linkable.
  - The latest version comes first.
  - The release date of each versions is displayed.
  - Mention if the project follows [Semantic Versioning][semver].

  ##### Types of changes
  - `Added` for new features.
  - `Changed` for changes in existing functionality.
  - `Deprecated` for once-stable features removed in upcoming releases.
  - `Removed` for deprecated features removed in this release.
  - `Fixed` for any bug fixes.
  - `Security` to invite users to upgrade in case of vulnerabilities.

  ### How can I reduce the effort required to maintain a changelog?

  Keep an `"Unreleased"` section at the top for keeping track of any changes.

  This serves two purposes:

  - People can see what changes they might expect in upcoming releases
  - At release time, you can convert `"Unreleased"` to the version's release
    number and add a new `"Unreleased"` header at the top.

  ### Can a changelog be bad?

  Yes, and this is how changelogs can hurt more than help:

  #### Commit log diffs

  Just don’t do that, you’re helping nobody.

  #### Ignoring Deprecations

  When people upgrade from one version to another, it should be painfully clear
  when something will break.

  #### Confusing Dates

  In the U.S., people put the month first: "06/02/2012" for June 2nd, 2012
  ("m/d/y"). This of course makes *no* sense. Luckily, the slash `/` delimiter
  is rare enough outside the U.S. that [many parsers][php-date] will guess the
  date is in this format. 
  
  Many people in the rest of the world write a robotic-looking "2 June 2012", 
  yet pronounce it differently. 
  
  "2012-06-02" ("y-m-d") works logically from largest to smallest, doesn't 
  overlap in ambiguous ways with other date formats, and is an 
  [ISO standard][iso]. Thus, it is the recommended date format for changelogs.

  There’s more. Help me collect those unicorn tears by [opening an
  issue][issues] or a pull request.

  ### Is there a standard changelog format?

  Sadly, no. Calm down. I know you're furiously rushing to find that link to the
  GNU changelog style guide, or the two-paragraph GNU NEWS file "guideline". The
  GNU style guide is a nice start but it is sadly naive. There's nothing wrong
  with being naive but when people need guidance it's rarely very helpful.
  Especially when there are many situations and edge cases to deal with.

  This project [contains what I hope will become a better CHANGELOG file
  convention][CHANGELOG]. I don't think the status quo is good enough, and I
  think that as a community we can come up with better conventions if we try to
  extract good practices from real software projects. Please take a look around
  and remember that [discussions and suggestions for improvements are
  welcome][issues]!

  ### What should the changelog file be named?

  Well, if you can’t tell from the example above, `CHANGELOG.md` is the
  best convention so far.

  Some projects also use `HISTORY.txt`, `HISTORY.md`, `History.md`, `NEWS.txt`,
  `NEWS.md`, `News.txt`, `RELEASES.txt`, `RELEASE.md`, `releases.md`, etc.

  It’s a mess. All these names only makes it harder for people to find it.

  ### Why can’t people just use a git log diff?

  Because log diffs are full of noise — by nature. They could not make a suitable
  changelog even in a hypothetical project run by perfect humans who never make
  typos, never forget to commit new files, never miss any part of a refactoring.
  The purpose of a commit is to document one atomic step in the process by which
  the code evolves from one state to another. The purpose of a changelog is to
  document the noteworthy differences between these states.

  As is the difference between good comments and the code itself,
  so is the difference between a changelog and the commit log:
  one describes the *why*, the other the how.

  ### Can changelogs be automatically parsed?
  It’s difficult, because people follow wildly different formats and file names.

  [Vandamme][vandamme] is a Ruby gem
  created by the [Gemnasium][gemnasium] team and which parses
  many (but not all) open source project changelogs.

  ### What about yanked releases?
  Yanked releases are versions that had to be pulled because of a serious
  bug or security issue. Often these versions don't even appear in change
  logs. They should. This is how you should display them:

  `## 0.0.5 - 2014-12-13 [YANKED]`

  The `[YANKED]` tag is loud for a reason. It's important for people to
  notice it. Since it's surrounded by brackets it's also easier to parse
  programmatically.

  ### Should you ever rewrite a changelog?
  Sure. There are always good reasons to improve a changelog. I regularly open
  pull requests to add missing releases to open source projects with unmaintained
  changelogs.

  It's also possible you may discover that you forgot to address a breaking change
  in the notes for a version. It's obviously important for you to update your
  changelog in this case.

  ### How can I contribute?
  This document is not the **truth**; it’s my carefully considered
  opinion, along with information and examples I gathered.
  Although I provide an actual [CHANGELOG][] on [the GitHub repo][gh],
  I have purposefully not created a proper *release* or clear list of rules
  to follow (as [SemVer.org][semver] does, for instance).

  This is because I want our community to reach a consensus. I believe the
  discussion is as important as the end result.

  So please [**pitch in**][gh].

  ### Press

  I [talked with Adam Stacoviak and Jerod Santo on The Changelog][thechangelog]
  (fitting, right?) podcast about why maintainers and
  contributors should care, and the motivations behind this project.
  If you can spare the time (1:06), it’s a good listen.

  [CHANGELOG]: https://github.com/olivierlacan/keep-a-changelog/blob/master/CHANGELOG.md
  [CONTRIBUTING]: https://github.com/olivierlacan/keep-a-changelog/blob/master/CONTRIBUTING.md
  [LICENSE]: https://github.com/olivierlacan/keep-a-changelog/blob/master/LICENSE
  [README]: https://github.com/olivierlacan/keep-a-changelog/blob/master/README.md
  [gemnasium]: https://gemnasium.com/
  [gh]: https://github.com/olivierlacan/keep-a-changelog
  [issues]: https://github.com/olivierlacan/keep-a-changelog/issues
  [semver]: http://semver.org/
  [shields]: http://shields.io/
  [thechangelog]: http://5by5.tv/changelog/127
  [vandamme]: https://github.com/tech-angels/vandamme/
  [iso]: http://www.iso.org/iso/home/standards/iso8601.htm
  [php-date]: http://php.net/manual/en/function.strtotime.php
